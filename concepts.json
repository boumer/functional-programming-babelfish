[
		{
			"name": "Forward function application",
			"description": "Apply / Pipe",
			"index": 0,
			"notes": "Applies an argument to a function. The Apply/Pipe-forward operator lets you pass an intermediate result onto the next function. The result of the left argument is passed as an argument to the right function. Data-oriented approach, more idiomatic in F# and Elm.",
			"languages": [
				{
					"name": "Purescript",
					"code": "#, applyFlipped"
				},
				{
					"name": "Haskell",
					"code": "&"
				},
				{
					"name": "Elm",
					"code": "|>",
          "example": "(|>) : a -> (a -> b) -> b\n\nemployeeBossStreet : Employee -> String\nemployeeBossStreet employee = \n  employee\n    |> boss\n    |> address\n    |> street\n\nemployeeBossStreet dummyEmployeeRecord\n>\"DummyEmployeeBossStreetName\" : String."
				},				{
					"name": "F#",
					"code": "|>",
					"example": "( |> ) : 'T1 -> ('T1 -> 'U) -> 'U \n\nlet employeeBossStreet (employee: Employee) : string = \n  employee\n    |> boss\n    |> address\n    |> street\n\nemployeeBossStreet dummyEmployeeRecord\n>val it : string = \"DummyEmployeeBossStreetName\""
				}
			],
			"links": [
				{
					"url": "https://pursuit.purescript.org/packages/purescript-prelude/2.1.0/docs/Prelude#v:(#)",
					"description": "Purescript # reference"
				},
				{
					"url": "http://stackoverflow.com/questions/1457140/haskell-composition-vs-fs-pipe-forward-operator",
					"description": "Stack Overflow discussion"
				},
				{
					"url": "http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Basics",
					"description": "Elm core documentation"
				},
				{
					"url": "https://www.reddit.com/r/haskell/comments/3mttyh/elms_operator/",
					"description": "A discussion on idiomatic operators in Elm and Haskell"
				}
			]
		},
		{
			"name": "Backward function application",
			"description": "Apply / Pipe",
			"index": 1,
			"notes": "Applies a function to an argument. Can be used to avoid parentheses and improve readability. The result of the right argument is applied to the left argument.",
			"languages": [
				{
					"name": "Purescript",
					"code": "$, apply",
					"example": "apply :: forall a b. (a -> b) -> a -> b\napply f x = f x\n\n= street (address (boss employee))\n= street $ address $ boss employee"
				},
				{
					"name": "Haskell",
					"code": "$",
					"example": "($) :: (a -> b) -> a -> b\nF x = f x\n\n= street (address (boss employee))\n= street $ address $ boss employee"
				},
				{
					"name": "Elm",
					"code": "<|",
					"example": "(a -> b) -> a -> b\n\nstreet (address (boss employee)) \nstreet <| address <| boss employee"
				},				{
					"name": "F#",
					"code": "<|",
					"example": "( <| ) : ('T -> 'U) -> 'T -> 'U\n(backward pipe operator)\nstreet (address (boss employee)) \nstreet <| address <| boss employee"
				}
			],
			"links": [
				{
					"url": "https://pursuit.purescript.org/packages/purescript-prelude/2.1.0/docs/Prelude#v:($)",
					"description": "Purescript $ reference"
				},
				{
					"url": "https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/functions/index",
					"description": "F# functions reference"
				},
				{
					"url": "https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/symbol-and-operator-reference/",
					"description": "F# operator reference"
				}
			]
		},
		{
			"name": "Composition - forward",
			"description": "Forward/right",
			"notes": "Creating a new, combined function by piping the result of the left argument to the right argument. A function-oriented approach, combining functions first, actual values input later.",
			"index": 2,
			"languages": [
				{
					"name": "Purescript",
					"code": ">>>, composeFlipped",
					"example": "compose :: forall a b c. (a -> b) -> (b -> c) -> a -> c\n\nbossStreet = (boss >>> address >>> street) employee"

				},
				{
					"name": "Haskell",
					"code": ">>>",
					"example": "bossStreet = (boss >>> address >>> street) employee"
				},
				{
					"name": "Elm",
					"code": ">>",
					"example": "(>>) : (a -> b) -> (b -> c) -> a -> c\n\nbossStreet = (boss >> address >> street)\n<function> : Employee"
				},				{
					"name": "F#",
					"code": ">>"
				}
			],
			"links": [
				{
					"url": "https://wiki.haskell.org/Function_composition",
					"description": "Haskell wiki"
				},
				{
					"url": "https://fsharpforfunandprofit.com/posts/function-composition/",
					"description": "F# for fun and profilt - function composition"
				},
				{
					"url": "http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#>>",
					"description": "Elm - basics >>"
				}
			]
		},
		{
			"name": "Composition - backward",
			"description": "Backward/left",
			"notes": "Creating a new, combined function by piping the result of the right argument to the left argument. A function-oriented approach, combining functions first, actual values input later. More idiomatic in Purescript/Haskell.",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "<<<, compose",
					"example": "compose :: forall a b c. (b -> c) -> (a -> b) -> a -> c\nbossStreet = (street <<< address <<< boss) employee"
				},
				{
					"name": "Haskell",
					"code": "."
				},
				{
					"name": "Elm",
					"code": "<<"
				},				{
					"name": "F#",
					"code": "<<"
				}
			],
			"links": [
				{
					"url": "https://wiki.haskell.org/Function_composition",
					"description": "Haskell wiki"
				},
				{
					"url": "https://fsharpforfunandprofit.com/posts/function-composition/",
					"description": "F# for fun and profilt - function composition"
				},
				{
					"url": "http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#<<",
					"description": "Elm - basics <<"
				}
			]
		},
		{
			"name": "Unit type",
			"description": "Empty",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "Unit"
				},
				{
					"name": "Haskell",
					"code": "()"
				},
				{
					"name": "Elm",
					"code": "()"
				},				{
					"name": "F#",
					"code": "()"
				}
			]
		},
		{
			"name": "Anonymous function",
			"description": "Lambda",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "\\x -> x + 1"
				},
				{
					"name": "Haskell",
					"code": "\\x -> x + 1"
				},
				{
					"name": "Elm",
					"code": "\\x -> x + 1"
				},				{
					"name": "F#",
					"code": "fun x -> x + 1"
				}
			]
		},
		{
			"name": "Identity function",
			"description": "",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "id"
				},
				{
					"name": "Haskell",
					"code": "id"
				},
				{
					"name": "Elm",
					"code": "identity"
				},				{
					"name": "F#",
					"code": "id"
				}
			]
		},
		{
			"name": "Tuple",
			"description": "Definition",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "Tuple a b"
				},
				{
					"name": "Haskell",
					"code": "(Int, String)"
				},
				{
					"name": "Elm",
					"code": "(Int, String)"
				},				{
					"name": "F#",
					"code": "inx * string"
				}
			]
		},
		{	"name": "Tuple",
			"description": "Usage",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "Tuple 2 \"Test\""
				},
				{
					"name": "Haskell",
					"code": "(2, \"Test\")"
				},
				{
					"name": "Elm",
					"code": "(2, \"Test\")"
				},				{
					"name": "F#",
					"code": "(2, \"Test\")"
				}
			]
		},
		{
			"name": "Record types",
			"description": "",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "type Point = { x :: Int, y :: Int}"
				},
				{
					"name": "Haskell",
					"code": "data Point = Point { x :: Int, y :: Int}"
				},
				{
					"name": "Elm",
					"code": "type alias Point = { x : Int, y : Int}"
				},				{
					"name": "F#",
					"code": "type Point = {\r x : int; y : int}"
				}
			]
		},
		{
			"name": "Union types",
			"description": "",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "data Shape Circle Point Int | Line Point Point"
				},
				{
					"name": "Haskell",
					"code": "data Shape = Circle Point Int | Line Point Point"
				},
				{
					"name": "Elm",
					"code": "type Shape = Circle Point Int | Line Point Point"
				},				{
					"name": "F#",
					"code": "type Shape = Circle of Point * int | Line of Point * Point"
				}
			]
		},
		{
			"name": "Maybe/Option",
			"description": "",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "data Maybe a = Just a | Nothing"
				},
				{
					"name": "Haskell",
					"code": "data Maybe a = Just a | Nothing"
				},
				{
					"name": "Elm",
					"code": "type Maybe a = Just a | Nothing"
				},				{
					"name": "F#",
					"code": "type Option<'a> = | Some of 'a | None"
				}
			]
	 	},
		{
			"name": "Either / Result",
			"description": "",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "data Either a b = Left a | Right b"
				},
				{
					"name": "Haskell",
					"code": "data Either a b = Left a | Right b"
				},
				{
					"name": "Elm",
					"code": "type Result error value = Ok value | Err error"
				},				{
					"name": "F#",
					"code": "(in F# 4.1) type Result<'T,'TError> = | Ok of 'T | Error of 'TError"
				}
			]
		},
		{
			"name": "Functor map",
			"description": "Map",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "<$>, map"
				},
				{
					"name": "Haskell",
					"code": "<$>, fmap"
				},
				{
					"name": "Elm",
					"code": "map"
				},				{
					"name": "F#",
					"code": "map"
				}
			]
		},
		{
			"name": "Functor apply",
			"description": "Apply",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "<*>, apply"
				},
				{
					"name": "Haskell",
					"code": "<*>"
				},
				{
					"name": "Elm",
					"code": ""
				},				{
					"name": "F#",
					"code": "apply"
				}
			]
		},
		{
			"name": "Functor lift",
			"description": "",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": "liftN"
				},
				{
					"name": "Haskell",
					"code": "liftN"
				},
				{
					"name": "Elm",
					"code": "mapN"
				},				{
					"name": "F#",
					"code": "mapN"
				}
			]
		},
		{
			"name": "Bind",
			"description": "",
			"index": 3,
			"languages": [
				{
					"name": "Purescript",
					"code": ">>=, bind"
				},
				{
					"name": "Haskell",
					"code": ">>="
				},
				{
					"name": "Elm",
					"code": "andThen"
				},				{
					"name": "F#",
					"code": "bind"
				}
			]
		}
	]
